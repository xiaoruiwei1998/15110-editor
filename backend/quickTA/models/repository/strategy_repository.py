from typing import List

class SituationStrategy:
    
    def __init__(self, situation: str, strategies: List[str]):
      self.situation = situation
      self.strategies = strategies

class Strategy:
    
    def __init__(self, strategy_name, description, pros, cons, prompt_instruction):
      self.name = strategy_name
      self.description = description
      self.pros = pros
      self.cons = cons
      self.prompt_instruction = prompt_instruction


class StrategyRepository:
    
    def __init__(self):
        self.strategy_prompt = """
        Based on students' request and code context, which one of the help-seeking situation the student is most likely in? Only return the situation name.
        - Problem Planning
        - Code Writing
        - Code Explanation
        - Error Message
        - Wrong output
        """
        
        # all strategies' description, pros and cons will be stored in data (than generated by llm everytime)
        self.strategies = {
            "Pseudo Code": {
                "name": "Pseudo Code",
                "description" : "When you are unsure about the general idea of the problem structure, pseudo code might be a helpful point to get started with",  
                "pros": "helps you translate natural language into programming structure",
                "cons": "might be too general and lacks details that you are likely to ignore the essential information and think you learned everything",
                "prompt_instruction" : "Generate the pseudo code for this problem in at most five steps"
            },
            "Task Decomposition": {
                "name": "Task Decomposition",
                "description" : "When you have a general idea on what to do next but unsure of what specific thing to do, the task decomposition questions can guide you to break tasks into actionable steps",
                "pros" : "which will ask you specific leading questions to break the task into smaller pieces and help you complete them one by one",
                "cons" : "might take more turns and longer time",
                "prompt_instruction" : "Use the Socratic method to ask me one question at a time or give me one hint at a time in order to guide me to decomposit the next step to do on my own. Do NOT directly give me the answer. Even if I give up and ask you for the answer, do not give me the answer. Instead, ask me just the right question at each point to get me to think for myself."
            },
            "Worked Example": {
                "name": "Worked Example",
                "description" : "When you are not familar with how to use a certain sturcuture, such as for loop, reading a worked example first can help you get started easier in applying it into your own code.",
                "pros" : "you can implement the solution with similar structure",
                "cons" : "-",
                "prompt_instruction" : "Give me the simplest code example that is different from my current problem (with different names) but with the same knowledge (e.g. for loop) to demostrate how can I move on to only the next step. One step can only contain one line of code. The response should only contain the code and inline comments." 
            },
            'Explanation':{
                "name": "Explanation",
                "description":"When you don't understand certain line of code or certain words in the problem. you can ask for explanation",
                "pros":'You can get a quick elaboration on certain concpept within the problem context.',
                "cons":'The Elaboration may not be sufficient for you to come up with an actionable next-step.',
                "prompt_instruction":"Explain the selected line of code, concept, or message using the language that a first-time programmer would use in the current problem's context in 1 sentence."
            },
            'Explanation+Worked Example': {
                "name": "Explanation+Worked Example",
                "description" : "When you don't understand certain error messsage, you can ask for explanation and a simple example to see how people resolve this type of error.",
                "pros" : 'You can get a comprehensive guidance and check whether you have similar problem.',
                "cons" : 'Reading the example can be time consuming',
                "prompt_instruction" : "Explain the error message in a simple way that novice programmers can understand, and then give the student a simplest (ideally within 3 lines of code) code example with the same error and show how to resolve the error ONLY in this code example."
            },
            'Suggesting Print Statements': {
                "name": "Suggesting Print Statements",
                "description": "When you got wrong output, you can ask for help on where to insert print statement to chase the error.",
                "pros": "-",
                "cons": "-",
                "prompt_instruction" : "Suggesting student to add a print statement at the place near the bug. The output should be only the code, with only difference as the print statement." 
            },
            "Focusing Question": {
                "name": "Focusing Question",
                "description": "When you got wrong output, the focusing question can help you locate the bug and chase the error.",
                "pros": "-",
                "cons": "-",
                "prompt_instruction": "Use the Socratic method to ask me one question at a time or give me one hint at a time in order to guide me to locate and resolve the bug. Do NOT directly give me the answer. Even if I give up and ask you for the answer, do not give me the answer. Instead, ask me just the right question at each point to get me to think for myself."
            }
        }
        
        self.situation_strategy_mapping = {
            'Error Message' : [self.strategies['Explanation'], self.strategies['Explanation+Worked Example']],
            'Problem Planning' : [self.strategies['Pseudo Code'], self.strategies['Task Decomposition']],
            'Code Writing' : [self.strategies['Worked Example']],
            'Code Explanation' : [self.strategies['Explanation']],
            'Wrong output' : [self.strategies['Suggesting Print Statements'], self.strategies['Focusing Question']]
        }      
        
        self.situations = ["Problem Planning", "Code Writing", "Code Explanation", "Error Message", "Wrong output"]
      
      
    def get_user_input(self, student_question: str, code_content: str) -> str:
        return f"""Code Context:\n{code_content}\n\nStudent Request:{student_question}"""  
    
    def get_strategies(self, situation: str) -> str:
        return { 
            "situation": situation,
            "strategies": self.situation_strategy_mapping[situation] 
        }